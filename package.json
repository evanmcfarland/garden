{
  "scripts": {
    "start": "npm run replica && npm run deploy",
    "replica": "dfx stop && dfx start --clean --background",

    "create-canisters": "npm run create:main && npm run create:seed && npm run create:btcflower && npm run create:ethflower && npm run create:icpflower",
    "create:main": "dfx canister create main --specified-id 2222s-4iaaa-aaaaf-ax2uq-cai",
    "create:seed": "dfx canister create seed --specified-id zzzzp-iiaaa-aaaaf-a5hga-cai",
    "create:btcflower": "dfx canister create btcflower --specified-id pk6rk-6aaaa-aaaae-qaazq-cai",
    "create:ethflower": "dfx canister create ethflower --specified-id dhiaa-ryaaa-aaaae-qabva-cai",
    "create:icpflower": "dfx canister create icpflower --specified-id 4ggk4-mqaaa-aaaae-qad6q-cai",

    "deploy": "npm run build-power-equalizer && npm run deploy:main && npm run deploy:seed && npm run deploy:btcflower && npm run deploy:ethflower && npm run deploy:icpflower",
    "deploy:main": "dfx deploy main --argument \"$(cat initArgs.did)\"",
    "deploy:seed": "dfx deploy seed --argument \"$(cat icrc1/initArgs.did)\"",
    "deploy:btcflower": "dfx deploy btcflower --argument \"$(cat power-equalizer/initArgs.did)\"",
    "deploy:ethflower": "dfx deploy ethflower --argument \"$(cat power-equalizer/initArgs.did)\"",
    "deploy:icpflower": "dfx deploy icpflower --argument \"$(cat power-equalizer/initArgs.did)\"",
    "build-power-equalizer": "cd power-equalizer && dfx build staging --check",

    "sources:test": "MOPS_ENV=test mops sources"
  }
}
